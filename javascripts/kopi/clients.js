// Generated by CoffeeScript 1.3.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  define("kopi/clients", function(require, exports, module) {
    var ClientNotSupported, clients, exceptions, ready, register, settings, unregister;
    exceptions = require("kopi/exceptions");
    settings = require("kopi/settings");
    ClientNotSupported = (function(_super) {

      __extends(ClientNotSupported, _super);

      ClientNotSupported.name = 'ClientNotSupported';

      function ClientNotSupported() {
        return ClientNotSupported.__super__.constructor.apply(this, arguments);
      }

      return ClientNotSupported;

    })(exceptions.Exception);
    clients = {};
    /*
      Enable client for adapter
    */

    register = function(platform, client) {
      if (client) {
        clients[platform] = new client();
      }
      return module.exports;
    };
    /*
      Disable client for adapter
    */

    unregister = function(platform) {
      delete clients[platform];
      return module.exports;
    };
    /*
      Adapter method for client ready
    */

    ready = function(fn) {
      var client, isReady, platform, readyFn;
      isReady = false;
      if (!fn) {
        return;
      }
      readyFn = function(client) {
        if (isReady) {
          return;
        }
        isReady = true;
        return fn(client);
      };
      for (platform in clients) {
        client = clients[platform];
        client.ready(readyFn);
      }
    };
    return {
      ClientNotSupported: ClientNotSupported,
      register: register,
      unregister: unregister,
      ready: ready
    };
  });

}).call(this);
