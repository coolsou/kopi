// Generated by CoffeeScript 1.3.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  define("kopi/ui/groups/adapters", function(require, exports, module) {
    var ArrayAdapter, BaseAdapter, QueueAdapter, array, events, queue;
    array = require("kopi/utils/array");
    events = require("kopi/events");
    queue = require("kopi/utils/structs/queue");
    /*
      Adapter interface
    */

    BaseAdapter = (function(_super) {

      __extends(BaseAdapter, _super);

      BaseAdapter.name = 'BaseAdapter';

      function BaseAdapter() {
        return BaseAdapter.__super__.constructor.apply(this, arguments);
      }

      return BaseAdapter;

    })(events.EventEmitter);
    ArrayAdapter = (function(_super) {

      __extends(ArrayAdapter, _super);

      ArrayAdapter.name = 'ArrayAdapter';

      function ArrayAdapter(array) {
        if (array == null) {
          array = [];
        }
        this._array = array;
      }

      ArrayAdapter.prototype.forEach = function(fn) {
        return array.forEach(this._array, fn);
      };

      ArrayAdapter.prototype.length = function() {
        return this._array.length;
      };

      return ArrayAdapter;

    })(BaseAdapter);
    QueueAdapter = (function(_super) {

      __extends(QueueAdapter, _super);

      QueueAdapter.name = 'QueueAdapter';

      QueueAdapter.CHANGE_EVENT = "change";

      function QueueAdapter(queue) {
        var changeFn, cls, self;
        cls = this.constructor;
        self = this;
        changeFn = function(e, obj) {
          return self.emit(cls.CHANGE_EVENT, [obj]);
        };
        self._queue = queue;
        queue.on(queue.EventQueue.ENQUEUE_EVENT, changeFn);
        queue.on(queue.EventQueue.DNQUEUE_EVENT, changeFn);
      }

      QueueAdapter.prototype.forEach = function(fn) {};

      QueueAdapter.prototype.length = function() {
        return this._queue.length();
      };

      return QueueAdapter;

    })(BaseAdapter);
    return {
      BaseAdapter: BaseAdapter,
      ArrayAdapter: ArrayAdapter,
      QueueAdapter: QueueAdapter
    };
  });

}).call(this);
