// Generated by CoffeeScript 1.3.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  define("kopi/ui/buttongroups", function(require, exports, module) {
    var Button, ButtonGroup, CheckboxButtonGroup, Group, RadioButtonGroup;
    Button = require("kopi/ui/buttons").Button;
    Group = require("kopi/ui/groups").Group;
    /*
      A `ButtonGroup` joins multiple buttons together as one composite component.
    */

    ButtonGroup = (function(_super) {

      __extends(ButtonGroup, _super);

      ButtonGroup.name = 'ButtonGroup';

      function ButtonGroup() {
        return ButtonGroup.__super__.constructor.apply(this, arguments);
      }

      ButtonGroup.widgetName("ButtonGroup");

      ButtonGroup.configure({
        childClass: Button,
        together: true
      });

      return ButtonGroup;

    })(Group);
    /*
      A group of buttons acts as checkbox inputs
    */

    CheckboxButtonGroup = (function(_super) {

      __extends(CheckboxButtonGroup, _super);

      CheckboxButtonGroup.name = 'CheckboxButtonGroup';

      function CheckboxButtonGroup() {
        return CheckboxButtonGroup.__super__.constructor.apply(this, arguments);
      }

      return CheckboxButtonGroup;

    })(ButtonGroup);
    /*
      A group of buttons acts as radio inputs
    */

    RadioButtonGroup = (function(_super) {

      __extends(RadioButtonGroup, _super);

      RadioButtonGroup.name = 'RadioButtonGroup';

      function RadioButtonGroup() {
        return RadioButtonGroup.__super__.constructor.apply(this, arguments);
      }

      return RadioButtonGroup;

    })(ButtonGroup);
    return {
      ButtonGroup: ButtonGroup,
      CheckboxButtonGroup: CheckboxButtonGroup
    };
  });

}).call(this);
