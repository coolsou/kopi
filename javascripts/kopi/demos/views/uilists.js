// Generated by CoffeeScript 1.3.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  define("kopi/demos/views/uilists", function(require, exports, module) {
    var ArrayAdapter, List, Scrollable, UIListView, View, array, navigation, reverse, viewswitchers;
    View = require("kopi/views").View;
    navigation = require("kopi/ui/navigation");
    viewswitchers = require("kopi/ui/viewswitchers");
    reverse = require("kopi/app/router").reverse;
    Scrollable = require("kopi/ui/scrollable").Scrollable;
    List = require("kopi/ui/lists").List;
    ArrayAdapter = require("kopi/ui/groups/adapters").ArrayAdapter;
    array = require("kopi/utils/array");
    UIListView = (function(_super) {

      __extends(UIListView, _super);

      UIListView.name = 'UIListView';

      function UIListView() {
        var backButton;
        UIListView.__super__.constructor.apply(this, arguments);
        backButton = new navigation.NavButton({
          url: reverse("ui"),
          titleText: "Back"
        });
        this.nav = new navigation.Nav({
          title: "List",
          leftButton: backButton
        });
        this.view = new viewswitchers.View();
        this.scrollable = new Scrollable({
          scrollX: false
        });
        this.list = new List({
          striped: true
        });
      }

      UIListView.prototype.oncreate = function() {
        var items, _i, _results;
        this.app.navBar.add(this.nav);
        this.nav.skeleton();
        this.app.viewSwitcher.add(this.view);
        this.view.skeleton();
        this.scrollable.skeletonTo(this.view.element);
        items = array.map((function() {
          _results = [];
          for (_i = 1; _i <= 30; _i++){ _results.push(_i); }
          return _results;
        }).apply(this), (function(i) {
          return "List Item " + i;
        }));
        this.list.adapter(new ArrayAdapter(items)).skeletonTo(this.scrollable.container());
        return UIListView.__super__.oncreate.apply(this, arguments);
      };

      UIListView.prototype.onstart = function() {
        this.app.navBar.show(this.nav);
        this.app.viewSwitcher.show(this.view);
        this.nav.render();
        this.view.render();
        this.list.render();
        this.scrollable.render();
        return UIListView.__super__.onstart.apply(this, arguments);
      };

      UIListView.prototype.ondestroy = function() {
        this.scrollable.destroy();
        this.list.destroy();
        this.nav.destroy();
        this.view.destroy();
        return UIListView.__super__.ondestroy.apply(this, arguments);
      };

      return UIListView;

    })(View);
    return {
      UIListView: UIListView
    };
  });

}).call(this);
