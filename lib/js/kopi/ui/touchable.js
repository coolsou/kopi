// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define("kopi/ui/touchable", function(require, exports, module) {
    var $, Map, Touchable, doc, events, support, widgets;
    $ = require("jquery");
    events = require("kopi/utils/events");
    support = require("kopi/utils/support");
    widgets = require("kopi/ui/widgets");
    Map = require("kopi/utils/structs/map").Map;
    doc = $(document);
    /*
      A widget supports touch events
    */

    Touchable = (function(_super) {
      var kls;

      __extends(Touchable, _super);

      kls = Touchable;

      kls.TOUCH_START_EVENT = "touchstart";

      kls.TOUCH_MOVE_EVENT = "touchmove";

      kls.TOUCH_END_EVENT = "touchend";

      kls.TOUCH_CANCEL_EVENT = "touchcancel";

      kls.EVENT_NAMESPACE = "touchable";

      kls.widgetName("Touchable");

      kls.configure({
        preventDefault: false,
        stopPropagation: false,
        gestures: []
      });

      function Touchable() {
        var gesture, options, _i, _len, _ref;
        Touchable.__super__.constructor.apply(this, arguments);
        options = this._options;
        this._gestures = new Map();
        _ref = options.gestures;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          gesture = _ref[_i];
          this.addGesture(new gesture(this, options));
        }
        return;
      }

      Touchable.prototype.onrender = function() {
        this.delegate();
        return Touchable.__super__.onrender.apply(this, arguments);
      };

      Touchable.prototype.ondestroy = function() {
        this.undelegate();
        return Touchable.__super__.ondestroy.apply(this, arguments);
      };

      Touchable.prototype.delegate = function() {
        var cls, touchCancelFn, touchEndFn, touchMoveFn, touchStartFn,
          _this = this;
        cls = this.constructor;
        touchMoveFn = function(e) {
          return _this.emit(kls.TOUCH_MOVE_EVENT, [e]);
        };
        touchEndFn = function(e) {
          doc.unbind(kls.eventName(events.TOUCH_MOVE_EVENT)).unbind(kls.eventName(events.TOUCH_END_EVENT)).unbind(kls.eventName(events.TOUCH_CANCEL_EVENT));
          return _this.emit(kls.TOUCH_END_EVENT, [e]);
        };
        touchCancelFn = function(e) {
          doc.unbind(kls.eventName(events.TOUCH_MOVE_EVENT)).unbind(kls.eventName(events.TOUCH_END_EVENT)).unbind(kls.eventName(events.TOUCH_CANCEL_EVENT));
          return _this.emit(kls.TOUCH_CANCEL_EVENT, [e]);
        };
        touchStartFn = function(e) {
          _this.emit(kls.TOUCH_START_EVENT, [e]);
          return doc.bind(kls.eventName(events.TOUCH_MOVE_EVENT), touchMoveFn).bind(kls.eventName(events.TOUCH_END_EVENT), touchEndFn).bind(kls.eventName(events.TOUCH_CANCEL_EVENT), touchCancelFn);
        };
        return this.element.bind(events.TOUCH_START_EVENT, touchStartFn);
      };

      Touchable.prototype.undelegate = function() {
        return this.element.unbind(events.TOUCH_START_EVENT);
      };

      Touchable.prototype.addGesture = function(gesture) {
        this._gestures.set(gesture.guid, gesture);
        return gesture;
      };

      Touchable.prototype.removeGesture = function(gesture) {
        this._gestures.remove(gesture.guid);
        return gesture;
      };

      Touchable.prototype.ontouchstart = function(e, event) {
        return this._callGestures(this.constructor.TOUCH_START_EVENT, event);
      };

      Touchable.prototype.ontouchmove = function(e, event) {
        return this._callGestures(this.constructor.TOUCH_MOVE_EVENT, event);
      };

      Touchable.prototype.ontouchend = function(e, event) {
        return this._callGestures(this.constructor.TOUCH_END_EVENT, event);
      };

      Touchable.prototype.ontouchcancel = function(e, event) {
        return this._callGestures(this.constructor.TOUCH_CANCEL_EVENT, event);
      };

      Touchable.prototype._callGestures = function(name, event) {
        this._gestures.forEach(function(key, gesture) {
          var method;
          method = gesture["on" + name];
          if (method) {
            if (method) {
              return method.call(gesture, event);
            }
          }
        });
      };

      /*
          Get point from event
      */


      Touchable.prototype._points = function(event) {
        var touches;
        event = event.originalEvent;
        if (support.touch) {
          touches = event.type === events.TOUCH_END_EVENT ? event.changedTouches : event.touches;
          if (this._options.multiTouch) {
            return touches;
          } else {
            return touches[0];
          }
        } else {
          if (this._options.multiTouch) {
            return [event];
          } else {
            return event;
          }
        }
      };

      return Touchable;

    })(widgets.Widget);
    return {
      Touchable: Touchable
    };
  });

}).call(this);
