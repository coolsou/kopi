// Generated by CoffeeScript 1.3.3
(function() {

  define("kopi/utils/array", function(require, exports, module) {
    var ArrayProto, asyncForEach, asyncParForEach, average, breaker, choice, clone, count, empty, exceptions, fill, forEach, has, indexOf, insertAt, isArray, isEmpty, last, map, math, random, remove, removeAt, rotate, simpleKeyFn, sum, unique, utils;
    exceptions = require("kopi/exceptions");
    utils = require("kopi/utils");
    math = Math;
    breaker = typeof StopIteration === 'undefined' ? '__break__' : StopIteration;
    ArrayProto = Array.prototype;
    /*
      Select a random item from array
    */

    choice = function(array) {
      return array[math.round(math.random() * (array.length - 1))];
    };
    clone = function(array) {
      return array.slice(0);
    };
    count = function(array, iterator, context) {
      var i, n, v, _i, _len;
      n = 0;
      for (i = _i = 0, _len = array.length; _i < _len; i = ++_i) {
        v = array[i];
        if (iterator.call(context, v, i)) {
          n += 1;
        }
      }
      return n;
    };
    empty = function(array) {
      return array.length = 0;
    };
    fill = function(value, count) {
      var i, _i, _results;
      if (count === 0) {
        return [];
      } else {
        _results = [];
        for (i = _i = 0; 0 <= count ? _i < count : _i > count; i = 0 <= count ? ++_i : --_i) {
          _results.push(value);
        }
        return _results;
      }
    };
    forEach = function(array, iterator, context) {
      var i, v, _i, _len;
      try {
        for (i = _i = 0, _len = array.length; _i < _len; i = ++_i) {
          v = array[i];
          iterator.call(context, v, i, array);
        }
      } catch (e) {
        if (e !== breaker) {
          throw e;
        }
      }
      return array;
    };
    /*
      Asynchronous sequential version of Array.prototype.forEach
    
      @param  {Array}     array     the array to iterate over
      @param  {Function}  iterator  the function to apply to each item in the array,
                                    function has three argument, the first is the item
                                    value, the second is the item index, the third is
                                    a callback function
      @param  {Function}  fn        the function to call when the forEach has ended
    */

    asyncForEach = function(array, iterator, fn, context) {
      var doneFn, len, loopFn;
      len = array.length;
      loopFn = function() {
        var i, v;
        v = array.pop();
        i = len - array.length - 1;
        return iterator.call(context, v, i, doneFn, array);
      };
      doneFn = function(error, result) {
        if (array.length > 0) {
          return loopFn();
        } else {
          if (fn) {
            return fn(error, result);
          }
        }
      };
      doneFn();
      return array;
    };
    /*
      Asynchronous parallel version of Array.prototype.forEach
    
      @param  {Array}     array     the array to iterate over
      @param  {Function}  iterator  the function to apply to each item in the array,
                                    function has three argument, the first is the item
                                    value, the second is the item index, the third is
                                    a callback function
      @param  {Function}  fn        the function to call when the forEach has ended
    */

    asyncParForEach = function(array, iterator, fn, context) {
      var done, doneFn, i, len, v, _i, _len;
      done = 0;
      len = array.length;
      if (array.length === 0) {
        fn();
      }
      doneFn = function(error, result) {
        done++;
        if (done === len && fn) {
          return fn(error, result);
        }
      };
      try {
        for (i = _i = 0, _len = array.length; _i < _len; i = ++_i) {
          v = array[i];
          iterator.call(context, v, i, doneFn, array);
        }
      } catch (e) {
        if (e !== breaker) {
          throw e;
        }
      }
      return array;
    };
    if (ArrayProto.indexOf) {
      indexOf = function(array, obj) {
        return ArrayProto.indexOf.call(array, obj);
      };
    } else {
      indexOf = function(array, obj) {
        var i, v, _i, _len;
        for (i = _i = 0, _len = array.length; _i < _len; i = ++_i) {
          v = array[i];
          if (v === obj) {
            return i;
          }
        }
        return -1;
      };
    }
    has = function(array, obj) {
      return indexOf(array, obj) !== -1;
    };
    insertAt = function(array, index, obj) {
      return array.splice(index, 0, obj);
    };
    isArray = Array.isArray || (Array.isArray = function(array) {
      return !!(array && array.concat && array.unshift && !array.callee);
    });
    isEmpty = function(array) {
      return array.length === 0;
    };
    last = function(array) {
      if (array.length > 0) {
        return array[array.length - 1];
      } else {
        return void 0;
      }
    };
    map = function(array, iterator, context) {
      var results;
      results = [];
      forEach(array, function(v, i) {
        return results[i] = iterator.call(context, v, i, array);
      });
      return results;
    };
    /*
      Pick a random item from array
    
      TODO Pick more than one item from array?
    
      @param  {Array}     array
      @return {Object}    A random item in array
    */

    random = function(array) {
      if (array.length > 1) {
        return array[math.floor(math.random() * array.length)];
      } else {
        return array[0];
      }
    };
    remove = function(array, obj) {
      var i;
      i = indexOf(array, obj);
      if (i >= 0) {
        return removeAt(array, obj);
      } else {
        return false;
      }
    };
    removeAt = function(array, i) {
      return ArrayProto.splice.call(array, i, 1).length === 1;
    };
    rotate = function(array, reverse) {
      var obj;
      if (reverse == null) {
        reverse = false;
      }
      if (reverse) {
        obj = array.shift();
        array.push(obj);
      } else {
        obj = array.pop();
        array.unshift(obj);
      }
      return obj;
    };
    /*
      求和
    
      @param  {Array}     array     数组
      @param  {Function}  iterator    求和函数
      @return {Object}              求和结果
    */

    sum = function(array, iterator, conext) {
      var i, item, s, _i, _len;
      s = 0;
      for (i = _i = 0, _len = array.length; _i < _len; i = ++_i) {
        item = array[i];
        s += iterator != null ? iterator.call(context, item, i) : item;
      }
      return s;
    };
    /*
      求平均
    
      @param  {Array}     array     数组
      @param  {Function}  iterator    求平均函数
      @return {Object}              求平均结果
    */

    average = function(array, iterator, context) {
      return sum(array, iterator, context) / array.length;
    };
    /*
      Removes duplicates from an array
    
      @param  {Array}     array
      @param  {Function}  comparer decides how items are considered duplicate
    */

    simpleKeyFn = function(item) {
      return (typeof item).charAt(0) + (item.guid || item);
    };
    unique = function(array, keyFn) {
      var hash, i, item, key, set, _i, _len;
      if (keyFn == null) {
        keyFn = simpleKeyFn;
      }
      set = [];
      hash = {};
      for (i = _i = 0, _len = array.length; _i < _len; i = ++_i) {
        item = array[i];
        key = keyFn(item);
        if (!(key in hash)) {
          hash[key] = true;
          set.push(item);
        }
      }
      return set;
    };
    return {
      ArrayProto: ArrayProto,
      choice: choice,
      clone: clone,
      count: count,
      forEach: forEach,
      asyncForEach: asyncForEach,
      asyncParForEach: asyncParForEach,
      empty: empty,
      fill: fill,
      indexOf: indexOf,
      has: has,
      insertAt: insertAt,
      isArray: isArray,
      isEmpty: isEmpty,
      last: last,
      map: map,
      random: random,
      remove: remove,
      removeAt: removeAt,
      rotate: rotate,
      sum: sum,
      average: average,
      unique: unique
    };
  });

}).call(this);
